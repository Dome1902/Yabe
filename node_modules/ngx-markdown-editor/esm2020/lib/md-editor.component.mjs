import { Component, ViewChild, forwardRef, Attribute, Input, Output, EventEmitter, Inject, PLATFORM_ID, SecurityContext } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "./resize-sensor/resize-sensor.component";
import * as i3 from "@angular/common";
const DEFAULT_EDITOR_OPTION = {
    showPreviewPanel: true,
    showBorder: true,
    hideIcons: [],
    usingFontAwesome5: false,
    scrollPastEnd: 0,
    enablePreviewContentClick: false,
    resizable: false
};
export class MarkdownEditorComponent {
    constructor(platform, required = false, maxlength = -1, _ngZone, _renderer2, _domSanitizer) {
        this.platform = platform;
        this.required = required;
        this.maxlength = maxlength;
        this._ngZone = _ngZone;
        this._renderer2 = _renderer2;
        this._domSanitizer = _domSanitizer;
        this.hideToolbar = false;
        this.height = "300px";
        this._mode = 'editor';
        this._options = {};
        this.onEditorLoaded = new EventEmitter();
        this.onPreviewDomChanged = new EventEmitter();
        this.hideIcons = {};
        this.showPreviewPanel = true;
        this.isFullScreen = false;
        this.dragover = false;
        this.isUploading = false;
        this._onChange = (_) => { };
        this._onTouched = () => { };
    }
    get mode() {
        return this._mode;
    }
    set mode(value) {
        this._mode = (!value || ['editor', 'preview'].indexOf(value.toLowerCase()) === -1)
            ? 'editor'
            : value;
        setTimeout(() => {
            if (this._aceEditorIns && typeof this._aceEditorIns.resize === 'function') {
                this._aceEditorIns.resize();
            }
        }, 100);
    }
    get options() {
        return this._options || {};
    }
    set options(value) {
        let _options = Object.assign(DEFAULT_EDITOR_OPTION, {}, value);
        let _hideIcons = {};
        if (typeof _options.showPreviewPanel === 'boolean') {
            this.showPreviewPanel = _options.showPreviewPanel;
        }
        if (Array.isArray(_options.hideIcons)) {
            _options.hideIcons.forEach((v) => {
                if (v === 'Refrence')
                    v = 'Reference';
                _hideIcons[v] = true;
            });
        }
        this._options = _options;
        this.hideIcons = _hideIcons;
    }
    //#region Markdown value and html value define
    get markdownValue() {
        return this._markdownValue || '';
    }
    get _hasUploadFunction() {
        return this.upload && this.upload instanceof Function;
    }
    get _isInBrowser() {
        return isPlatformBrowser(this.platform);
    }
    ngOnInit() {
        if (!this._isInBrowser)
            return;
        let markedRender = new marked.Renderer();
        markedRender.image = this._getRender('image');
        markedRender.code = this._getRender('code');
        markedRender.table = this._getRender('table');
        markedRender.listitem = this._getRender('listitem');
        let markedjsOpt = {
            renderer: markedRender,
            highlight: (code) => hljs.highlightAuto(code).value
        };
        this._markedJsOpt = Object.assign({}, markedjsOpt, this.options.markedjsOpt);
        if (this._markedJsOpt.sanitize === true && typeof this._markedJsOpt.sanitizer !== 'function') {
            this._markedJsOpt.sanitizer = (markdownString) => {
                return this._domSanitizer.sanitize(SecurityContext.HTML, markdownString);
            };
        }
    }
    ngAfterViewInit() {
        if (!this._isInBrowser)
            return;
        let editorElement = this.aceEditorContainer.nativeElement;
        let editor = ace.edit(editorElement);
        editor.$blockScrolling = Infinity;
        editor.getSession().setUseWrapMode(true);
        editor.getSession().setMode("ace/mode/markdown");
        editor.setValue(this.markdownValue, 1);
        editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);
        editor.on('change', (e) => {
            if (this._isValueSettedByprogrammatically)
                return;
            let val = editor.getValue();
            this._updateMarkdownValue(val, true);
            this._onChange(this.markdownValue);
        });
        editor.on('blur', () => { this._onTouched(); });
        this.onEditorLoaded.next(editor);
        this._aceEditorIns = editor;
    }
    ngOnDestroy() {
        this._aceEditorIns && this._aceEditorIns.destroy();
    }
    writeValue(value) {
        this._updateMarkdownValue(value, false);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    validate(c) {
        let result = null;
        if (this.required && this.markdownValue.length === 0) {
            result = { required: true };
        }
        if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {
            result = { maxlength: true };
        }
        return result;
    }
    insertContent(type, customContent) {
        if (!this._aceEditorIns)
            return;
        let selectedText = this._aceEditorIns.getSelectedText();
        let isSelected = !!selectedText;
        let startSize = 2;
        let initText = '';
        let range = this._aceEditorIns.selection.getRange();
        switch (type) {
            case 'Bold':
                initText = 'Bold Text';
                selectedText = `**${selectedText || initText}**`;
                break;
            case 'Italic':
                initText = 'Italic Text';
                selectedText = `*${selectedText || initText}*`;
                startSize = 1;
                break;
            case 'Heading':
                initText = 'Heading';
                selectedText = `# ${selectedText || initText}`;
                break;
            case 'Reference':
                initText = 'Reference';
                selectedText = `> ${selectedText || initText}`;
                break;
            case 'Link':
                selectedText = `[](http://)`;
                startSize = 1;
                break;
            case 'Image':
                selectedText = `![](http://)`;
                break;
            case 'Ul':
                selectedText = `- ${selectedText || initText}`;
                break;
            case 'Ol':
                selectedText = `1. ${selectedText || initText}`;
                startSize = 3;
                break;
            case 'Code':
                initText = 'Source Code';
                selectedText = "```language\r\n" + (selectedText || initText) + "\r\n```";
                startSize = 3;
                break;
            case 'Custom':
                selectedText = customContent;
                startSize = 0;
                break;
        }
        this._aceEditorIns.session.replace(range, selectedText);
        if (!isSelected) {
            range.start.column += startSize;
            range.end.column = range.start.column + initText.length;
            this._aceEditorIns.selection.setRange(range);
        }
        this._aceEditorIns.focus();
    }
    togglePreview() {
        this.showPreviewPanel = !this.showPreviewPanel;
        this.editorResize();
    }
    previewPanelClick(event) {
        if (this.options.enablePreviewContentClick !== true) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
    fullScreen() {
        this.isFullScreen = !this.isFullScreen;
        this._renderer2.setStyle(document.body, 'overflowY', this.isFullScreen ? 'hidden' : 'auto');
        this.editorResize();
    }
    mdEditorResize(size) {
        this.editorResize();
    }
    editorResize(timeOut = 100) {
        if (!this._aceEditorIns)
            return;
        if (this._aceEditorResizeTimer)
            clearTimeout(this._aceEditorResizeTimer);
        this._aceEditorResizeTimer = setTimeout(() => {
            this._aceEditorIns.resize();
            this._aceEditorIns.focus();
        }, timeOut);
    }
    onDragover(evt) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
        if (!this._hasUploadFunction)
            return;
        this.dragover = true;
    }
    onDrop(evt) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
        this._uploadFiles(evt.dataTransfer.files);
    }
    onDragleave(evt) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
        if (!this._hasUploadFunction)
            return;
        this.dragover = false;
    }
    onAceEditorPaste(event) {
        if (event instanceof ClipboardEvent && event.clipboardData.files.length > 0) {
            this._uploadFiles(event.clipboardData.files);
        }
    }
    _updateMarkdownValue(value, changedByUser = false) {
        const normalizedValue = typeof value === 'string' ? value : (value || '').toString();
        if (this._markdownValue === normalizedValue)
            return;
        this._markdownValue = normalizedValue;
        this._updateDom();
        if (this._aceEditorIns && !changedByUser) {
            this._isValueSettedByprogrammatically = true;
            this._aceEditorIns.setValue(normalizedValue, 1);
            this._isValueSettedByprogrammatically = false;
        }
    }
    _updateDom() {
        if (this._convertMarkdownToHtmlTimer)
            clearTimeout(this._convertMarkdownToHtmlTimer);
        this._convertMarkdownToHtmlTimer = setTimeout(() => {
            Promise.resolve(this.markdownValue)
                .then((mdContent) => {
                return (this.preRender && this.preRender instanceof Function) ? this.preRender(mdContent) : mdContent;
            })
                .then(mdContent => {
                let html = marked(mdContent || '', this._markedJsOpt);
                return (this.postRender && this.postRender instanceof Function) ? this.postRender(html) : html;
            })
                .then(parsedHtml => {
                this.previewHtml = this._domSanitizer.bypassSecurityTrustHtml(parsedHtml);
                if (this.previewContainer && this.previewContainer.nativeElement) {
                    this._ngZone.runOutsideAngular(() => {
                        this._renderer2.setProperty(this.previewContainer.nativeElement, 'innerHTML', parsedHtml);
                        setTimeout(() => { this.onPreviewDomChanged.next(this.previewContainer.nativeElement); }, 100);
                    });
                }
            })
                .catch(err => {
                console.error(err);
            });
        }, 100);
    }
    _getRender(renderType) {
        let customRender = this.options && this.options.customRender && this.options.customRender[renderType];
        if (customRender && typeof customRender === 'function') {
            return customRender;
        }
        else {
            switch (renderType) {
                case 'image':
                    return function (href, title, text) {
                        let out = `<img style="max-width: 100%;" src="${href}" alt="${text}"`;
                        if (title) {
                            out += ` title="${title}"`;
                        }
                        out += this.options.xhtml ? "/>" : ">";
                        return out;
                    };
                case 'code':
                    return function (code, language) {
                        let validLang = !!(language && hljs.getLanguage(language));
                        let highlighted = '';
                        if (validLang) {
                            highlighted = hljs.highlight(language, code).value;
                        }
                        else {
                            let pre = document.createElement('pre');
                            pre.innerText = code;
                            highlighted = pre.innerHTML;
                        }
                        return `<pre style="padding: 0; border-radius: 0;"><code class="hljs ${language}">${highlighted}</code></pre>`;
                    };
                case 'table':
                    return function (header, body) {
                        return `<table class="table table-bordered">\n<thead>\n${header}</thead>\n<tbody>\n${body}</tbody>\n</table>\n`;
                    };
                case 'listitem':
                    return function (text, task, checked) {
                        if (/^\s*\[[x ]\]\s*/.test(text) || text.startsWith('<input')) {
                            if (text.startsWith('<input')) {
                                text = text
                                    .replace('<input disabled="" type="checkbox">', '<i class="fa fa-square-o"></i>')
                                    .replace('<input checked="" disabled="" type="checkbox">', '<i class="fa fa-check-square"></i>');
                            }
                            else {
                                text = text
                                    .replace(/^\s*\[ \]\s*/, '<i class="fa fa-square-o"></i> ')
                                    .replace(/^\s*\[x\]\s*/, '<i class="fa fa-check-square"></i> ');
                            }
                            return `<li>${text}</li>`;
                        }
                        else {
                            return `<li>${text}</li>`;
                        }
                    };
            }
        }
    }
    _uploadFiles(files) {
        if (!this._hasUploadFunction || this.isUploading)
            return;
        if (!files || files.length === 0) {
            this.dragover = false;
            return;
        }
        this.isUploading = true;
        // force dragover to be true, as Uploading mask won't work otherwise
        this.dragover = true;
        Promise.resolve()
            .then(() => {
            return this.upload(files);
        })
            .then(data => {
            if (Array.isArray(data)) {
                let msg = [];
                for (let item of data) {
                    let tempMsg = `[${item.name}](${item.url})`;
                    if (item.isImg) {
                        tempMsg = `!${tempMsg}`;
                    }
                    msg.push(tempMsg);
                }
                this.insertContent('Custom', msg.join('\r\n'));
            }
            else {
                console.warn('Invalid upload result. Please using follow this type `UploadResult`.');
            }
            this.isUploading = false;
            this.dragover = false;
        })
            .catch(err => {
            console.error(err);
            this.isUploading = false;
            this.dragover = false;
        });
    }
}
MarkdownEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: MarkdownEditorComponent, deps: [{ token: PLATFORM_ID }, { token: 'required', attribute: true }, { token: 'maxlength', attribute: true }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
MarkdownEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: MarkdownEditorComponent, selector: "md-editor", inputs: { hideToolbar: "hideToolbar", height: "height", preRender: "preRender", postRender: "postRender", upload: "upload", mode: "mode", options: "options" }, outputs: { onEditorLoaded: "onEditorLoaded", onPreviewDomChanged: "onPreviewDomChanged" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MarkdownEditorComponent),
            multi: true
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => MarkdownEditorComponent),
            multi: true
        }
    ], viewQueries: [{ propertyName: "aceEditorContainer", first: true, predicate: ["aceEditor"], descendants: true, static: true }, { propertyName: "previewContainer", first: true, predicate: ["previewContainer"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"md-editor-container\" [class.font-awesome5]=\"options?.usingFontAwesome5\" [class.fullscreen]=\"isFullScreen\"\r\n  [class.md-editor-resizable]=\"options?.resizable\" [style.height]=\"height\">\r\n  <div class=\"md-layout\">\r\n    <div class=\"tool-bar\" *ngIf=\"!hideToolbar && mode != 'preview'\">\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Bold\" (click)=\"insertContent('Bold')\"\r\n          *ngIf=\"!hideIcons.Bold\">\r\n          <i class=\"fa fa-bold\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Italic\" (click)=\"insertContent('Italic')\"\r\n          *ngIf=\"!hideIcons.Italic\">\r\n          <i class=\"fa fa-italic\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Heading\" (click)=\"insertContent('Heading')\"\r\n          *ngIf=\"!hideIcons.Heading\">\r\n          <i class=\"fa fa-header\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Reference\" (click)=\"insertContent('Reference')\"\r\n          *ngIf=\"!hideIcons.Reference\">\r\n          <i class=\"fa fa-quote-left\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Link\" (click)=\"insertContent('Link')\"\r\n          *ngIf=\"!hideIcons.Link\">\r\n          <i class=\"fa fa-link\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Image\" (click)=\"insertContent('Image')\"\r\n          *ngIf=\"!hideIcons.Image\">\r\n          <i class=\"fa fa-image\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Unordered List\" (click)=\"insertContent('Ul')\"\r\n          *ngIf=\"!hideIcons.Ul\">\r\n          <i class=\"fa fa-list-ul\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Ordered List\" (click)=\"insertContent('Ol')\"\r\n          *ngIf=\"!hideIcons.Ol\">\r\n          <i class=\"fa fa-list-ol\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Code Block\" (click)=\"insertContent('Code')\"\r\n          *ngIf=\"!hideIcons.Code\">\r\n          <i class=\"fa fa-file-code-o\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\"\r\n          [attr.title]=\"showPreviewPanel ? 'Hide Preview' : 'Show Preview'\" (click)=\"togglePreview()\"\r\n          *ngIf=\"!hideIcons.TogglePreview\">\r\n          <i class=\"fa\" [class.fa-eye]=\"!showPreviewPanel\" [class.fa-eye-slash]=\"showPreviewPanel\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group pull-right hide-split\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [class.active]=\"isFullScreen\" (click)=\"fullScreen()\"\r\n          *ngIf=\"!hideIcons.FullScreen\">\r\n          <i class=\"fa\" [class.fa-arrows-alt]=\"!options?.usingFontAwesome5 || !isFullScreen\"\r\n            [class.fa-compress]=\"options?.usingFontAwesome5 && isFullScreen\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"editor-container\">\r\n      <div [class.dragover]=\"dragover\" [style.display]=\"mode == 'preview' ? 'none' : null\"\r\n        (dragover)=\"onDragover($event)\">\r\n        <div class=\"drag-container\">\r\n          <div class=\"upload-loading\">\r\n            <i class=\"fa fa-upload\" *ngIf=\"!isUploading\"></i>\r\n            <i class=\"fa fa-spinner fa-pulse fa-fw\" *ngIf=\"isUploading\"></i>\r\n            <div class=\"text\">{{ isUploading ? 'Uploading' : 'Drag it here' }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"drag-container drag-container-mask\" (drop)=\"onDrop($event)\" (dragleave)=\"onDragleave($event)\"></div>\r\n        <div class=\"editor-panel\" contenteditable=\"true\" (paste)=\"onAceEditorPaste($event)\">\r\n          <div class=\"ace-editor\" #aceEditor></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"preview-container\" [style.display]=\"(mode == 'preview' || showPreviewPanel) ? 'block' : 'none'\"\r\n        (click)=\"previewPanelClick($event)\">\r\n        <div class=\"preview-panel\" #previewContainer></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"md-footer\" *ngIf=\"maxlength > 0 && mode != 'preview'\">\r\n      <div class=\"text-right length-view\">\r\n        {{ markdownValue?.length }} / {{ maxlength }}\r\n      </div>\r\n      <div class=\"resize-btn\"></div>\r\n    </div>\r\n  </div>\r\n  <md-editor-resize-sensor *ngIf=\"options?.resizable\" (resize)=\"mdEditorResize($event)\"></md-editor-resize-sensor>\r\n</div>\r\n", styles: [".md-editor-container{position:relative;height:100%;margin-bottom:15px;border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%!important;height:100%!important;z-index:99999999}.md-editor-container.md-editor-resizable:not(.fullscreen){resize:both;overflow:hidden;display:inline-block;width:100%}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-layout .editor-container{height:calc(100% - 70px)}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-footer{z-index:-1}.md-editor-container.font-awesome5 .fa.fa-header:before{content:\"\\f1dc\"}.md-editor-container.font-awesome5 .fa.fa-file-code-o:before{content:\"\\f121\"}.md-editor-container.font-awesome5 .fa.fa-arrows-alt:before{content:\"\\f065\"}.md-editor-container .md-layout{height:100%;display:flex;flex-direction:column}.md-editor-container .md-layout .tool-bar{background-color:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.md-editor-container .md-layout .tool-bar .btn-group{padding:6px}.md-editor-container .md-layout .tool-bar .btn-group:first-child>.btn:first-child:before{display:none}.md-editor-container .md-layout .tool-bar .btn-group>.btn:first-child:before{content:\" \";background-color:#a9a9a9;width:1px;height:24px;left:-9px;top:2px;position:absolute}.md-editor-container .md-layout .tool-bar .btn-group.hide-split>.btn:first-child:before{display:none}.md-editor-container .md-layout .tool-bar .btn{margin-bottom:0}.md-editor-container .md-layout .editor-container{flex:1;display:flex;height:calc(100% - 100px)}.md-editor-container .md-layout .editor-container>div{flex:1}.md-editor-container .md-layout .editor-container>div .drag-container{display:none}.md-editor-container .md-layout .editor-container>div.dragover{position:relative}.md-editor-container .md-layout .editor-container>div.dragover .drag-container{display:block;position:absolute;left:0;top:0;right:0;bottom:0;z-index:10;background-color:#0006;display:flex;align-items:center;justify-content:center;font-size:50px;color:#fff}.md-editor-container .md-layout .editor-container>div.dragover .drag-container.drag-container-mask{background-color:transparent;z-index:11}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading{display:flex;flex-direction:column;align-items:center}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading .text{font-size:20px;margin-top:10px}.md-editor-container .md-layout .editor-container .editor-panel{height:100%}.md-editor-container .md-layout .editor-container .editor-panel .ace-editor{height:100%;min-height:100%}.md-editor-container .md-layout .preview-container{overflow:auto}.md-editor-container .md-layout .preview-container .preview-panel{height:100%;border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px}.md-editor-container .md-layout .md-footer{background-color:#f0f0f0;border-top:1px solid rgba(0,0,0,.1);display:flex;align-items:center}.md-editor-container .md-layout .md-footer .length-view{flex:1;padding:4px 2px 0;font-size:12px;line-height:16px}.md-editor-container .md-layout .md-footer .resize-btn{width:17px}.md-editor-container .pull-right{float:right}\n"], components: [{ type: i2.MarkdownEditorResizeSensorComponent, selector: "md-editor-resize-sensor", inputs: ["interval"], outputs: ["resize"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: MarkdownEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-editor', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MarkdownEditorComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => MarkdownEditorComponent),
                            multi: true
                        }
                    ], template: "<div class=\"md-editor-container\" [class.font-awesome5]=\"options?.usingFontAwesome5\" [class.fullscreen]=\"isFullScreen\"\r\n  [class.md-editor-resizable]=\"options?.resizable\" [style.height]=\"height\">\r\n  <div class=\"md-layout\">\r\n    <div class=\"tool-bar\" *ngIf=\"!hideToolbar && mode != 'preview'\">\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Bold\" (click)=\"insertContent('Bold')\"\r\n          *ngIf=\"!hideIcons.Bold\">\r\n          <i class=\"fa fa-bold\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Italic\" (click)=\"insertContent('Italic')\"\r\n          *ngIf=\"!hideIcons.Italic\">\r\n          <i class=\"fa fa-italic\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Heading\" (click)=\"insertContent('Heading')\"\r\n          *ngIf=\"!hideIcons.Heading\">\r\n          <i class=\"fa fa-header\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Reference\" (click)=\"insertContent('Reference')\"\r\n          *ngIf=\"!hideIcons.Reference\">\r\n          <i class=\"fa fa-quote-left\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Link\" (click)=\"insertContent('Link')\"\r\n          *ngIf=\"!hideIcons.Link\">\r\n          <i class=\"fa fa-link\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Image\" (click)=\"insertContent('Image')\"\r\n          *ngIf=\"!hideIcons.Image\">\r\n          <i class=\"fa fa-image\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Unordered List\" (click)=\"insertContent('Ul')\"\r\n          *ngIf=\"!hideIcons.Ul\">\r\n          <i class=\"fa fa-list-ul\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Ordered List\" (click)=\"insertContent('Ol')\"\r\n          *ngIf=\"!hideIcons.Ol\">\r\n          <i class=\"fa fa-list-ol\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Code Block\" (click)=\"insertContent('Code')\"\r\n          *ngIf=\"!hideIcons.Code\">\r\n          <i class=\"fa fa-file-code-o\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\"\r\n          [attr.title]=\"showPreviewPanel ? 'Hide Preview' : 'Show Preview'\" (click)=\"togglePreview()\"\r\n          *ngIf=\"!hideIcons.TogglePreview\">\r\n          <i class=\"fa\" [class.fa-eye]=\"!showPreviewPanel\" [class.fa-eye-slash]=\"showPreviewPanel\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group pull-right hide-split\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [class.active]=\"isFullScreen\" (click)=\"fullScreen()\"\r\n          *ngIf=\"!hideIcons.FullScreen\">\r\n          <i class=\"fa\" [class.fa-arrows-alt]=\"!options?.usingFontAwesome5 || !isFullScreen\"\r\n            [class.fa-compress]=\"options?.usingFontAwesome5 && isFullScreen\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"editor-container\">\r\n      <div [class.dragover]=\"dragover\" [style.display]=\"mode == 'preview' ? 'none' : null\"\r\n        (dragover)=\"onDragover($event)\">\r\n        <div class=\"drag-container\">\r\n          <div class=\"upload-loading\">\r\n            <i class=\"fa fa-upload\" *ngIf=\"!isUploading\"></i>\r\n            <i class=\"fa fa-spinner fa-pulse fa-fw\" *ngIf=\"isUploading\"></i>\r\n            <div class=\"text\">{{ isUploading ? 'Uploading' : 'Drag it here' }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"drag-container drag-container-mask\" (drop)=\"onDrop($event)\" (dragleave)=\"onDragleave($event)\"></div>\r\n        <div class=\"editor-panel\" contenteditable=\"true\" (paste)=\"onAceEditorPaste($event)\">\r\n          <div class=\"ace-editor\" #aceEditor></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"preview-container\" [style.display]=\"(mode == 'preview' || showPreviewPanel) ? 'block' : 'none'\"\r\n        (click)=\"previewPanelClick($event)\">\r\n        <div class=\"preview-panel\" #previewContainer></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"md-footer\" *ngIf=\"maxlength > 0 && mode != 'preview'\">\r\n      <div class=\"text-right length-view\">\r\n        {{ markdownValue?.length }} / {{ maxlength }}\r\n      </div>\r\n      <div class=\"resize-btn\"></div>\r\n    </div>\r\n  </div>\r\n  <md-editor-resize-sensor *ngIf=\"options?.resizable\" (resize)=\"mdEditorResize($event)\"></md-editor-resize-sensor>\r\n</div>\r\n", styles: [".md-editor-container{position:relative;height:100%;margin-bottom:15px;border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%!important;height:100%!important;z-index:99999999}.md-editor-container.md-editor-resizable:not(.fullscreen){resize:both;overflow:hidden;display:inline-block;width:100%}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-layout .editor-container{height:calc(100% - 70px)}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-footer{z-index:-1}.md-editor-container.font-awesome5 .fa.fa-header:before{content:\"\\f1dc\"}.md-editor-container.font-awesome5 .fa.fa-file-code-o:before{content:\"\\f121\"}.md-editor-container.font-awesome5 .fa.fa-arrows-alt:before{content:\"\\f065\"}.md-editor-container .md-layout{height:100%;display:flex;flex-direction:column}.md-editor-container .md-layout .tool-bar{background-color:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.md-editor-container .md-layout .tool-bar .btn-group{padding:6px}.md-editor-container .md-layout .tool-bar .btn-group:first-child>.btn:first-child:before{display:none}.md-editor-container .md-layout .tool-bar .btn-group>.btn:first-child:before{content:\" \";background-color:#a9a9a9;width:1px;height:24px;left:-9px;top:2px;position:absolute}.md-editor-container .md-layout .tool-bar .btn-group.hide-split>.btn:first-child:before{display:none}.md-editor-container .md-layout .tool-bar .btn{margin-bottom:0}.md-editor-container .md-layout .editor-container{flex:1;display:flex;height:calc(100% - 100px)}.md-editor-container .md-layout .editor-container>div{flex:1}.md-editor-container .md-layout .editor-container>div .drag-container{display:none}.md-editor-container .md-layout .editor-container>div.dragover{position:relative}.md-editor-container .md-layout .editor-container>div.dragover .drag-container{display:block;position:absolute;left:0;top:0;right:0;bottom:0;z-index:10;background-color:#0006;display:flex;align-items:center;justify-content:center;font-size:50px;color:#fff}.md-editor-container .md-layout .editor-container>div.dragover .drag-container.drag-container-mask{background-color:transparent;z-index:11}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading{display:flex;flex-direction:column;align-items:center}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading .text{font-size:20px;margin-top:10px}.md-editor-container .md-layout .editor-container .editor-panel{height:100%}.md-editor-container .md-layout .editor-container .editor-panel .ace-editor{height:100%;min-height:100%}.md-editor-container .md-layout .preview-container{overflow:auto}.md-editor-container .md-layout .preview-container .preview-panel{height:100%;border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px}.md-editor-container .md-layout .md-footer{background-color:#f0f0f0;border-top:1px solid rgba(0,0,0,.1);display:flex;align-items:center}.md-editor-container .md-layout .md-footer .length-view{flex:1;padding:4px 2px 0;font-size:12px;line-height:16px}.md-editor-container .md-layout .md-footer .resize-btn{width:17px}.md-editor-container .pull-right{float:right}\n"] }]
        }], ctorParameters: function () { return [{ type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['required']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['maxlength']
                }] }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i1.DomSanitizer }]; }, propDecorators: { aceEditorContainer: [{
                type: ViewChild,
                args: ['aceEditor', { static: true }]
            }], previewContainer: [{
                type: ViewChild,
                args: ['previewContainer', { static: true }]
            }], hideToolbar: [{
                type: Input
            }], height: [{
                type: Input
            }], preRender: [{
                type: Input
            }], postRender: [{
                type: Input
            }], upload: [{
                type: Input
            }], mode: [{
                type: Input
            }], options: [{
                type: Input
            }], onEditorLoaded: [{
                type: Output
            }], onPreviewDomChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,