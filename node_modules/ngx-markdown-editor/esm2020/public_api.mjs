import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MarkdownEditorComponent } from './lib/md-editor.component';
import { MarkdownEditorResizeSensorComponent } from './lib/resize-sensor/resize-sensor.component';
import * as i0 from "@angular/core";
export { MarkdownEditorComponent } from './lib/md-editor.component';
export { MarkdownEditorResizeSensorComponent } from './lib/resize-sensor/resize-sensor.component';
export class LMarkdownEditorModule {
}
LMarkdownEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: LMarkdownEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LMarkdownEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: LMarkdownEditorModule, declarations: [MarkdownEditorComponent,
        MarkdownEditorResizeSensorComponent], imports: [CommonModule,
        FormsModule], exports: [MarkdownEditorComponent,
        MarkdownEditorResizeSensorComponent] });
LMarkdownEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: LMarkdownEditorModule, imports: [[
            CommonModule,
            FormsModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: LMarkdownEditorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        MarkdownEditorComponent,
                        MarkdownEditorResizeSensorComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule
                    ],
                    exports: [
                        MarkdownEditorComponent,
                        MarkdownEditorResizeSensorComponent
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wdWJsaWNfYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQzs7QUFFbEcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFpQmxHLE1BQU0sT0FBTyxxQkFBcUI7O2tIQUFyQixxQkFBcUI7bUhBQXJCLHFCQUFxQixpQkFaOUIsdUJBQXVCO1FBQ3ZCLG1DQUFtQyxhQUduQyxZQUFZO1FBQ1osV0FBVyxhQUdYLHVCQUF1QjtRQUN2QixtQ0FBbUM7bUhBRzFCLHFCQUFxQixZQVR2QjtZQUNQLFlBQVk7WUFDWixXQUFXO1NBQ1o7MkZBTVUscUJBQXFCO2tCQWRqQyxRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRTt3QkFDWix1QkFBdUI7d0JBQ3ZCLG1DQUFtQztxQkFDcEM7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLFlBQVk7d0JBQ1osV0FBVztxQkFDWjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsdUJBQXVCO3dCQUN2QixtQ0FBbUM7cUJBQ3BDO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5pbXBvcnQgeyBNYXJrZG93bkVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vbGliL21kLWVkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBNYXJrZG93bkVkaXRvclJlc2l6ZVNlbnNvckNvbXBvbmVudCB9IGZyb20gJy4vbGliL3Jlc2l6ZS1zZW5zb3IvcmVzaXplLXNlbnNvci5jb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IHsgTWFya2Rvd25FZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2xpYi9tZC1lZGl0b3IuY29tcG9uZW50JztcclxuZXhwb3J0IHsgTWFya2Rvd25FZGl0b3JSZXNpemVTZW5zb3JDb21wb25lbnQgfSBmcm9tICcuL2xpYi9yZXNpemUtc2Vuc29yL3Jlc2l6ZS1zZW5zb3IuY29tcG9uZW50JztcclxuZXhwb3J0IHsgTWRFZGl0b3JPcHRpb24sIFVwbG9hZFJlc3VsdCwgTWFya2VkanNPcHRpb24gfSBmcm9tICcuL2xpYi9tZC1lZGl0b3IudHlwZXMnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIE1hcmtkb3duRWRpdG9yQ29tcG9uZW50LFxyXG4gICAgTWFya2Rvd25FZGl0b3JSZXNpemVTZW5zb3JDb21wb25lbnRcclxuICBdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBNYXJrZG93bkVkaXRvckNvbXBvbmVudCxcclxuICAgIE1hcmtkb3duRWRpdG9yUmVzaXplU2Vuc29yQ29tcG9uZW50XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTE1hcmtkb3duRWRpdG9yTW9kdWxlIHsgfVxyXG4iXX0=