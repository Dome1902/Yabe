"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readFile = exports.getProjectFromWorkspace = exports.getWorkspace = void 0;
const schematics_1 = require("@angular-devkit/schematics");
function getWorkspace(tree) {
    const workspaceConfigBuffer = tree.read('angular.json');
    if (!workspaceConfigBuffer) {
        throw new schematics_1.SchematicsException('Not an Angular CLI workspace');
    }
    const workspaceConfig = JSON.parse(workspaceConfigBuffer.toString());
    return workspaceConfig;
}
exports.getWorkspace = getWorkspace;
function getProjectFromWorkspace(config, projectName) {
    if (!config.projects)
        throw new schematics_1.SchematicsException('No projects are defined');
    if (projectName) {
        const project = config.projects[projectName];
        if (!project) {
            throw new schematics_1.SchematicsException(`No project named "${projectName}" exists.`);
        }
        Object.defineProperty(project, 'name', { enumerable: false, value: projectName });
        return project;
    }
    const allProjectNames = Object.entries(config.projects)
        .filter(([name, value]) => value.projectType !== 'library')
        .filter(([name, _]) => !name.includes('e2e'));
    if (allProjectNames.length !== 1)
        throw new schematics_1.SchematicsException('Multiple projects are defined; please specify a project name');
    const [name, _] = allProjectNames[0];
    const project = config.projects[name];
    Object.defineProperty(project, 'name', { enumerable: false, value: projectName });
    return project;
}
exports.getProjectFromWorkspace = getProjectFromWorkspace;
function readFile(tree, filePath) {
    const content = tree.read(filePath);
    if (content === null) {
        throw new schematics_1.SchematicsException(`File ${filePath} does not exist.`);
    }
    return content.toString('utf-8');
}
exports.readFile = readFile;
//# sourceMappingURL=util.js.map