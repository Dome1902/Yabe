"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeCollectionReadingOptions = exports.defaultCollectionReadingOptions = exports.mergeSeederConfig = exports.defaultSeederConfig = void 0;
const extend = require("extend");
const database_1 = require("./database");
/**
 * Stores default configuration for database seeding.
 */
exports.defaultSeederConfig = {
    database: database_1.defaultDatabaseConfigObject,
    databaseReconnectTimeout: 10000,
    dropDatabase: false,
    dropCollections: false,
    removeAllDocuments: false,
};
/**
 * Merges configuration for database seeding.
 *
 * @param partial Partial config object. If not specified, returns a default config object.
 * @param previous Previous config object. If not specified, uses a default config object as a base.
 */
const mergeSeederConfig = (partial, previous) => {
    const source = previous ? previous : exports.defaultSeederConfig;
    if (!partial) {
        return source;
    }
    const config = {};
    return extend(true, config, source, partial);
};
exports.mergeSeederConfig = mergeSeederConfig;
/**
 * Stores default collection reading configuration values.
 */
exports.defaultCollectionReadingOptions = {
    extensions: ['json', 'js', 'cjs'],
    ejsonParseOptions: {
        relaxed: true,
    },
    transformers: [],
};
/**
 * Merges configuration for collection reading.
 *
 * @param partial Partial config object. If not specified, returns a default config object.
 * @param previous Previous config object. If not specified, uses a default config object as a base.
 */
const mergeCollectionReadingOptions = (partial, previous) => {
    const source = previous ? previous : exports.defaultCollectionReadingOptions;
    if (!partial) {
        return source;
    }
    const config = {};
    return extend(true, config, source, partial);
};
exports.mergeCollectionReadingOptions = mergeCollectionReadingOptions;
//# sourceMappingURL=config.js.map