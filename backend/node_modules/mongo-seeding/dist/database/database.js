"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
/**
 * Provides functionality for managing documents, collections in database.
 */
class Database {
    /**
     * Constructs a new `Database` object.
     *
     * @param db MongoDB database object
     */
    constructor(mongoClient, log) {
        this.client = mongoClient;
        this.db = mongoClient.db();
        this.log = log ? log : () => { };
    }
    /**
     * Inserts documents into a given collection.
     *
     * @param documentsToInsert Array of documents, which are being imported
     * @param collectionName Collection name
     * @param collectionInsertOptions Optional collection import options
     */
    insertDocumentsIntoCollection(documentsToInsert, collectionName, collectionInsertOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const documentsCopy = documentsToInsert.map((document) => (Object.assign({}, document)));
            return this.db
                .collection(collectionName)
                .insertMany(documentsCopy, collectionInsertOptions);
        });
    }
    /**
     * Drops database.
     */
    drop() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.db.dropDatabase();
        });
    }
    /**
     * Checks if a given collection exist.
     *
     * @param collectionName Collection name
     */
    ifCollectionExist(collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const collections = yield this.db.collections();
            return collections
                .map((collection) => collection.collectionName)
                .includes(collectionName);
        });
    }
    /**
     * Drops a given collection if exists.
     *
     * @param collectionName Collection name
     */
    dropCollectionIfExists(collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.ifCollectionExist(collectionName))) {
                return;
            }
            return this.db.collection(collectionName).drop();
        });
    }
    /**
     * Remove all documents from a given collection
     * if it exists.
     *
     * @param collectionName Collection name
     */
    removeAllDocumentsIfCollectionExists(collectionName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.ifCollectionExist(collectionName))) {
                return;
            }
            return this.db.collection(collectionName).deleteMany({});
        });
    }
    /**
     * Closes connection with database.
     */
    closeConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            this.log('Closing connection...');
            if (!this.client || !this.client.isConnected()) {
                return;
            }
            yield this.client.close(true);
        });
    }
}
exports.Database = Database;
//# sourceMappingURL=database.js.map